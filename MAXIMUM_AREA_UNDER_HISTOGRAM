https://www.hackerearth.com/practice/data-structures/arrays/1-d/practice-problems/algorithm/thief-and-warehouses-6ebf4e07/

import java.util.*;
class TestClass {
    public static long Histogram(long arr[],int n){
        long area=0;
        long maxarea=0;
        Stack<Integer> st =new Stack<Integer>();
        int i=0;
        while(i<n){
            if(st.isEmpty() || arr[i]>arr[st.peek()]){
                st.push(i);
                i++;
            }
            else{
                int top=st.pop();
                if(st.isEmpty()){
                    area=arr[top]*i;
                }
                else{
                    area=arr[top]*(i-st.peek()-1);
                }
                if(area>maxarea){
                    maxarea=area;
                }
            }
        }
        while(!st.isEmpty()){
            int top=st.pop();
            if(st.isEmpty()){
                area=arr[top]*i;
            }
            else{
                area=arr[top]*(i-st.peek()-1);
            }
            if(area>maxarea){
                maxarea=area;
            }
        }
        return maxarea;

    }
    public static void main(String args[] ) throws Exception {
        Scanner sc=new Scanner(System.in);
        long test=sc.nextLong();
        while(--test>=0){
            int n=sc.nextInt();
            long arr[]=new long[n];
            for(int i=0;i<n;i++){
                arr[i]=sc.nextLong();
            }
            System.out.println(Histogram(arr,n));
        }
    }
}
