import sys
from functools import lru_cache, cmp_to_key
from heapq import merge, heapify, heappop, heappush
from math import *
from collections import defaultdict as dd, deque, Counter as C
from itertools import combinations as comb, permutations as perm
from bisect import bisect_left as bl, bisect_right as br, bisect
from time import perf_counter
from fractions import Fraction
# import numpy as np


mod = int(pow(10, 9) + 7)
mod2 = 998244353
def data(): return sys.stdin.readline().strip()
def out(*var, end="\n"): sys.stdout.write(' '.join(map(str, var))+end)
def L(): return list(sp())
def sl(): return list(ssp())
def sp(): return map(int, data().split())
def ssp(): return map(str, data().split())
def l1d(n, val=0): return [val for i in range(n)]
def l2d(n, m, val=0): return [l1d(n, val) for j in range(m)]

try:
    # sys.setrecursionlimit(int(pow(10,6)))
    sys.stdin = open("input.txt", "r")
    sys.stdout = open("../output.txt", "w")
except:
    pass



sys.setrecursionlimit(2*(10**5))
class node():
    def __init__(self):
        self.n={}
        self.c=0
def insert(s,d):
    curr=d
    for sub in s:
        # print(c,curr)
        if sub not in curr:
            r=node()
            curr[sub]=r
        # print(curr)
        curr[sub].c+=1
        curr=curr[sub].n
# @lru_cache(None)
def dfs(node, k):
    x=node.keys()
    if not x:
        return ""
    x=min(x) if k==0 else max(x)
    return x+dfs(node[x].n,k)
    
def solve():
    n=L()[0]
    d={}
    A=[]
    idx={}
    for i in range(n):
        A.append(input())
        insert(A[-1],d)
        idx[A[-1]]=i+1
    q=L()[0]
    for i  in range(q):
        s=input().split()
        if s[0]=="1":
            x=int(s[1])-1
            A.append(A[x]+s[2])
            insert(A[-1],d)
            idx[A[-1]]=len(A)
        elif s[0]=="2":
            print(idx[dfs(d,0)])
        else:
            print(idx[dfs(d,-1)])
    
    

t=int(input())
for term in range(t):
    solve()

